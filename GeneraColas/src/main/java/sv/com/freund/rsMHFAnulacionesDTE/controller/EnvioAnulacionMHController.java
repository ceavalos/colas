package sv.com.freund.rsMHFAnulacionesDTE.controller;

import javax.naming.InitialContext;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import springfox.documentation.annotations.ApiIgnore;
import sv.com.freund.rsMHFAnulacionesDTE.service.EnvioDTEService;
import sv.com.freund.rsMHFAnulacionesDTE.service.ListenerProcessContainer;
import sv.com.freund.rsMHFAnulacionesDTE.service.ProcessThread;
import sv.com.freund.rsMHFAnulacionesDTE.service.ReadFromQueue;

@RequestMapping(value = "/envioAnulacionesMH")
@RestController
public class EnvioAnulacionMHController {

    @Autowired
    private EnvioDTEService service;
    
    @Autowired
    private ListenerProcessContainer listenerProcessContainer;

    static Logger log = Logger.getLogger(EnvioAnulacionMHController.class);

    /**
     * Metodo para procesar el json DTE del MH
     *
     * @param codgeneracion codigo Ãºnico de identificacion del documento electronico
     * @param codtd codigo del tipo de documento
     * @param json { "version":2, "idEnvio":1, "ambiente":"01",
     * "documento":"eyJhbGciOiJSUzUxMiJ9..ThC1iX-LGACPU-LcBKR9sBHAcVdeRXAovCnvXGsEwnkjYaErbQBgEoxjEM8tVc7-Irbf8m9VbVtw2QCIW5vS6yJHTpg6DgS1kfG-IVX-sGpqOVb4Io0Su0Ew_AejhFfJsZi1bEbgRR_8N-wIqRX52CECYhOR7NGjiRzQSCZS5LvWkkkKu0EQ2xjpm--b9PQ8byYnNT3P6DrhbEkizLTC7cMh_RS3P5qgtCR5YBGmo4Aeb0mqISfkGNZbgRE8l282pYN434i0BqWDPgaGvPXn4PwKFHOCpjEoM5thEPO2IGAeuHfOAPl7B340eMQrxDVUIaxAKj684sEZ0U3DgNBWhw"
     * }
     * @return mensaje sobre el resultado del procesamiento del documento DTE
     */
    @PostMapping(value = "/procesarJson/{codgeneracion}/{codtd}", 
                 produces = "application/json", 
                 consumes = "application/json")
    public String procesamientoDTE(@PathVariable String codgeneracion, 
                                   @PathVariable String codtd, 
                                   @RequestBody String strGson) {
        String respuesta = service.recepcionDTE(strGson,codgeneracion,codtd);
        return respuesta;
        //return ResponseEntity.ok("Se lee la cola");
    }
    
    @RequestMapping(value = "/activarListener", method = RequestMethod.GET)
    public ResponseEntity<?> firstPage() {
        for(int i=1; i<=4;i++){
           ProcessThread hilo = new ProcessThread(service, i);
           hilo.start();
           listenerProcessContainer.AgregaHilosAdd (hilo);
        }
        return ResponseEntity.ok("Activacion exitosa");
    }
}
